class Solution {
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0|| grid[0].length == 0)
        {
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        //boolean[][] visited = new boolean[m][n];
        int num = 0;
        for(int  i =0;i<m;i++)
        {
            for(int j = 0;j<n;j++)
            {
                if(grid[i][j]=='1')
                {
                    dfs(grid,i,j);
                    num++;
                }
            }
        }
        return num;
    }
    void dfs(char[][]grid,int r,int c)
    {
        if(r<0 || r>=grid.length|| c<0 || c>=grid[0].length || grid[r][c]!='1')
        {
            return ;
        }
        grid[r][c] = '0';
        dfs(grid,r,c+1);
        dfs(grid,r,c-1);
        dfs(grid,r+1,c);
        dfs(grid,r-1,c);
    }
}
